Abdullah Ahmed 
53639
Lab task 9
17/10/2024
CS 3-2
Question 1


#include <iostream>
using namespace std;

class CircularQueue {
private:
    int *queue;
    int front;
    int rear;
    int size;
    int count;

public:
    CircularQueue(int capacity) {
        size = capacity;
        queue = new int[size];
        front = -1;
        rear = -1;
        count = 0;
    }

    ~CircularQueue() {
        delete[] queue;
    }

    bool enqueue(int value) {
        if (isFull()) {
            cout << "Queue Overflow! Cannot insert " << value << endl;
            return false;
        }

        if (front == -1) {
            front = 0;
        }

        rear = (rear + 1) % size;
        queue[rear] = value;
        count++;
        return true;
    }

    bool dequeue() {
        if (isEmpty()) {
            cout << "Queue Underflow! Nothing to remove." << endl;
            return false;
        }

        front = (front + 1) % size;
        count--;
        return true;
    }

    bool isFull() const {
        return count == size;
    }

    bool isEmpty() const {
        return count == 0;
    }

    int getFront() const {
        if (isEmpty()) {
            cout << "Queue is empty." << endl;
            return -1;
        }
        return queue[front];
    }

    int getSize() const {
        return count;
    }
};

int main() {
    CircularQueue q(5);

    q.enqueue(10);
    q.enqueue(20);
    q.enqueue(30);
    q.enqueue(40);
    q.enqueue(50);

    q.enqueue(60);

    q.dequeue();
    q.dequeue();

    q.enqueue(60);

    cout << "Front element: " << q.getFront() << endl;
    cout << "Queue size: " << q.getSize() << endl;

    return 0;
}


Question 2


#include <iostream>
using namespace std;

class CircularQueue {
private:
    int *queue;
    int front;
    int rear;
    int size;
    int count;

public:
    CircularQueue(int capacity) {
        size = capacity;
        queue = new int[size];
        front = -1;
        rear = -1;
        count = 0;
    }

    ~CircularQueue() {
        delete[] queue;
    }

    bool enqueue(int value) {
        if (isFull()) {
            cout << "Queue Overflow! Cannot insert " << value << endl;
            return false;
        }

        if (front == -1) {
            front = 0;
        }

        rear = (rear + 1) % size;
        queue[rear] = value;
        count++;
        return true;
    }

    bool dequeue() {
        if (isEmpty()) {
            cout << "Queue Underflow! Nothing to remove." << endl;
            return false;
        }

        front = (front + 1) % size;
        count--;
        return true;
    }

    bool isFull() const {
        return count == size;
    }

    bool isEmpty() const {
        return count == 0;
    }

    int getFront() const {
        if (isEmpty()) {
            cout << "Queue is empty." << endl;
            return -1;
        }
        return queue[front];
    }
    int countElements() const {
        return count;
    }
};

int main() {
    CircularQueue q(5);

    q.enqueue(10);
    q.enqueue(20);
    q.enqueue(30);
    q.enqueue(40);
    q.enqueue(50);

    cout << "Number of elements in the queue: " << q.countElements() << endl;

    q.dequeue();
    q.dequeue();

    cout << "Number of elements in the queue after dequeue: " << q.countElements() << endl;

    q.enqueue(60);

    cout << "Number of elements in the queue after enqueue: " << q.countElements() << endl;

    return 0;
}

Question 3



#include <iostream>
using namespace std;

class CircularQueue {
private:
    int *queue;
    int front;
    int rear;
    int size;
    int count;

public:
    CircularQueue(int capacity) {
        size = capacity;
        queue = new int[size];
        front = -1;
        rear = -1;
        count = 0;
    }

    ~CircularQueue() {
        delete[] queue;
    }

    bool enqueue(int value) {
        if (isFull()) {
            cout << "Queue Overflow! Cannot insert " << value << endl;
            return false;
        }

        if (front == -1) {
            front = 0;
        }

        rear = (rear + 1) % size;
        queue[rear] = value;
        count++;
        return true;
    }

    bool dequeue() {
        if (isEmpty()) {
            cout << "Queue Underflow! Nothing to remove." << endl;
            return false;
        }

        front = (front + 1) % size;
        count--;
        return true;
    }

    bool isFull() const {
        return count == size;
    }

    bool isEmpty() const {
        return count == 0;
    }

    int getFront() const {
        if (isEmpty()) {
            cout << "Queue is empty." << endl;
            return -1;
        }
        return queue[front];
    }

    int countElements() const {
        return count;
    }
    void clear() {
        front = -1;
        rear = -1;
        count = 0;
        cout << "Queue has been cleared." << endl;
    }
};

int main() {
    CircularQueue q(5);

    q.enqueue(10);
    q.enqueue(20);
    q.enqueue(30);
    q.enqueue(40);
    q.enqueue(50);

    cout << "Number of elements in the queue: " << q.countElements() << endl;
    q.clear();

    cout << "Number of elements in the queue after clearing: " << q.countElements() << endl;

    return 0;
}
